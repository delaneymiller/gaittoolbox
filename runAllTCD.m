%% Run experiment to all TCD data
% To display the mean of results per label
% row = startsWith(results.name, 'tcd-s4') | startsWith(results.name, 'tcd-s5')
% fresults = results(row, :)
% varfun(@mean, results, 'InputVariables', @isnumeric, 'GroupingVariables', 'label')
% writetable(rTable, '
dir = 'totalcapture';
expDir = "./exp";

dataList = { ...
    struct('subj', 's1', 'act', 'Acting1'), ...
    struct('subj', 's1', 'act', 'Acting2'), ...
    struct('subj', 's1', 'act', 'Acting3'), ...
    struct('subj', 's1', 'act', 'freestyle1'), ...
    struct('subj', 's1', 'act', 'freestyle2'), ...
    struct('subj', 's1', 'act', 'freestyle3'), ...
    struct('subj', 's1', 'act', 'rom1'), ...
    struct('subj', 's1', 'act', 'rom2'), ...
    struct('subj', 's1', 'act', 'rom3'), ...
    struct('subj', 's1', 'act', 'walking1'), ...
    struct('subj', 's1', 'act', 'walking2'), ...
    struct('subj', 's1', 'act', 'walking3'), ...
    struct('subj', 's2', 'act', 'acting1'), ...
    struct('subj', 's2', 'act', 'acting2'), ...
    struct('subj', 's2', 'act', 'acting3'), ...
    struct('subj', 's2', 'act', 'freestyle1'), ...
    struct('subj', 's2', 'act', 'freestyle2'), ...
    struct('subj', 's2', 'act', 'freestyle3'), ...
    struct('subj', 's2', 'act', 'rom1'), ...
    struct('subj', 's2', 'act', 'rom2'), ...
    struct('subj', 's2', 'act', 'rom3'), ...
    struct('subj', 's2', 'act', 'walking1'), ...
    struct('subj', 's2', 'act', 'walking2'), ...
    struct('subj', 's2', 'act', 'walking3'), ...
    struct('subj', 's3', 'act', 'acting1'), ...
    struct('subj', 's3', 'act', 'acting2'), ...
    struct('subj', 's3', 'act', 'acting3'), ...
    struct('subj', 's3', 'act', 'freestyle1'), ...
    struct('subj', 's3', 'act', 'freestyle2'), ...
    struct('subj', 's3', 'act', 'freestyle3'), ...
    struct('subj', 's3', 'act', 'rom1'), ...
    struct('subj', 's3', 'act', 'rom2'), ...
    struct('subj', 's3', 'act', 'rom3'), ...
    struct('subj', 's3', 'act', 'walking1'), ...
    struct('subj', 's3', 'act', 'walking2'), ...
    struct('subj', 's3', 'act', 'walking3'), ...
    struct('subj', 's4', 'act', 'acting3'), ...
    struct('subj', 's4', 'act', 'freestyle1'), ...
    struct('subj', 's4', 'act', 'freestyle3'), ...
    struct('subj', 's4', 'act', 'rom3'), ...
    struct('subj', 's4', 'act', 'walking2'), ...
    struct('subj', 's5', 'act', 'acting3'), ...
    struct('subj', 's5', 'act', 'freestyle1'), ...
    struct('subj', 's5', 'act', 'freestyle3'), ...
    struct('subj', 's5', 'act', 'rom3'), ...
    struct('subj', 's5', 'act', 'walking2'), ...
};
% dataList = {
%     struct('subj', 's1', 'act', 'Acting1'), ...
% };

% setups = {
%     struct('label', 'Dxxx', 'est', 'ekfv3', ...
%            'accData', 'x', 'oriData', 'x', 'zuptData', 'x', ...
%            'zupt', 0, 'cstr', 0, 'P', 0.5), ...
%     struct('label', 'Dxxx+UWB', 'est', 'ekfv3', ...
%            'accData', 'x', 'oriData', 'x', 'zuptData', 'x', ...
%            'zupt', 0, 'cstr', 0, 'uwb', 1, 'P', 0.5), ...
% };
setups = {
    struct('est', 'ekfv3', 'accData', 'x', 'oriData', 'x', 'accDataNoise', 0.5, ...
           'applyMeas', 21, 'applyCstr', 0, 'P', 0.5), ...
};
for mI = [0:4]
    for cI = [0 1:7 21:23 51:54 71:77]
        setups{end+1} = struct('est', 'ekfv3', ...
           'accData', 'x', 'oriData', 'x', 'accDataNoise', 0.5, ...
           'applyMeas', mI, 'applyCstr', cI, 'P', 0.5);
    end
end

for i = 1:length(setups)
    setups{i}.label = getLabel(setups{i});
end
           
dataN = length(dataList);
results = table();

for i = 1:dataN
    n = dataList{i};
    name = sprintf('%s-%s-%s', 'tcd', n.subj, lower(n.act));
    dataPath = sprintf('%s/mat/%s.mat', dir, name);
    if exist(dataPath, 'file')
        load(dataPath, 'data');
    else
        data = struct('name', name, ...
            'fnameV', sprintf('%s/vicon/%s/%s_BlenderZXY_YmZ.bvh', dir, n.subj, lower(n.act)), ...
            'fnameS', sprintf('%s/gyroMag/%s/%s_Xsens_AuxFields.sensors', dir, n.subj, n.act), ...
            'fnameCIB', sprintf('%s/imu/%s/%s_%s_calib_imu_bone.txt', dir, n.subj, n.subj, lower(n.act)), ...
            'fnameCIR', sprintf('%s/imu/%s/%s_%s_calib_imu_ref.txt', dir, n.subj, n.subj, lower(n.act)) ...
            );
        data.dataV = tcdlib.BVHBody.loadBVHFile(data.fnameV, 'mm');
        data.dataV = tcdlib.BVHBody.loadBVHFile(data.fnameV, 'mm');
        data.dataS = tcdlib.XsensBody.loadSensorFile(data.fnameS);
        data.calibIB = tcdlib.XsensBody.loadCalib(data.fnameCIB);
        data.calibIR = tcdlib.XsensBody.loadCalib(data.fnameCIR);
        save(dataPath, 'data');
    end
    display(sprintf("Data %3d/%3d: %s", i, dataN, data.name));
    r = runTCDExperiment(data.dataV, data.dataS, data.calibIB, data.calibIR, ...
                                data.name, setups, expDir);
    results = [results; struct2table(r)];
end

% Append new results
dataPath = sprintf("%s/results.mat", expDir);
if exist(dataPath, 'file')
    newResults = results;
    load(dataPath);
    [C, ia, ib] = intersect(results(:,{'name', 'label'}), newResults(:,{'name', 'label'}));
    results(ia,:) = [];
    results = [results; newResults];
end
save(sprintf("%s/results.mat", expDir), 'results')

function label = getLabel(setup)
    if setup.accData == 'v'
        if setup.accDataNoise == 0 
            aD = 'v';
        else
            aD = strrep(sprintf('v%.1f', setup.accDataNoise), '.', '');
        end
    else
        aD = setup.accData;
    end
    label = sprintf('D%s%s+M%02d+C%03d', aD, setup.oriData, ...
        setup.applyMeas, setup.applyCstr);
end