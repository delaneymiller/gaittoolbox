%% Run experiment for all NeuRA data
% To display the mean of results per label
% row = startsWith(results.name, 'tcd-s4') | startsWith(results.name, 'tcd-s5')
% fresults = results(row, :)
% varfun(@mean, results, 'InputVariables', @isnumeric, 'GroupingVariables', 'label')
% writetable(rTable, '
dir = 'neura';
expDir = sprintf('%s/explore', dir);

dataList = { ...
%     struct('subj', 'S00-1', 'act', 'Trial-012'), ...
%     struct('subj', 'S00-1', 'act', 'Trial-014'), ...
%     struct('subj', 'S00-1', 'act', 'Trial-017'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-016'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-018'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-020'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-023'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-024'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-025'), ...
%     struct('subj', 'S00-2', 'act', 'Trial-026'), ...
    struct('subj', 'S00-3', 'act', 'Trial-029'), ...
    struct('subj', 'S00-3', 'act', 'Trial-032'), ...
    struct('subj', 'S00-3', 'act', 'Trial-033'), ...
%     struct('subj', 'S00-3', 'act', 'Trial-038'), ...
%     struct('subj', 'S00-3', 'act', 'Trial-039'), ...
%     struct('subj', 'S00-3', 'act', 'Trial-040'), ...
%     struct('subj', 'S00-3', 'act', 'Trial-041'), ...
};

options = struct('Pelvis', '00B40B91', ...
    'L_UpLeg', '00B40C45', 'R_UpLeg', '00B40C3C', ...
    'L_LowLeg', '00B40C49', 'R_LowLeg', '00B40C4A', ...
    'L_Foot', '00B40C55', 'R_Foot', '00B40C48');
%     'L_LowLeg', '00B40BA5', 'R_LowLeg', '00B40C35', ...
% options = struct('Pelvis', 'Pelvis', ...
%     'L_UpLeg', 'LeftUpperLeg', 'R_UpLeg', 'RightUpperLeg', ...
%     'L_LowLeg', 'prop', 'R_LowLeg', 'prop_1', ...
%     'L_Foot', 'LeftFoot', 'R_Foot', 'RightFoot');

setups = {
    struct('est', 'ekfv3', 'accData', 's', 'oriData', 's', 'initSrc', 'v', ...
           'accDataNoise', 0, 'applyMeas', 21, 'applyCstr', 0, 'P', 0.5), ...
%     struct('est', 'ekfv3', 'accData', 'v', 'oriData', 'v', 'accDataNoise', 0, ...
%            'applyMeas', 21, 'applyCstr', 0, 'P', 0.5), ...
};

% for mI = [0]
%     for cI = [0 1:8 21:23 51:54 71:77 121:122 124:125 131:132 134:135 ...
%               141:144 151:154 201:208 221:223 271:278]
%         setups{end+1} = struct('est', 'ekfv3', ...
%            'accData', 'v', 'oriData', 'v', 'accDataNoise', 0, ...
%            'initSrc', 'v', 'applyMeas', mI, 'applyCstr', cI, 'P', 0.5);
%     end
% end

% for iI = ['v' 'x']
for iI = ['v']
%     for mI = [0 1:2]
%         for cI = [0 1:8 21:23 51:54 71:78 121:122 124:125 131:132 134:135 ...
%               141:144 151:154 201:208 221:223 271:278]
    for mI = [2]
        for cI = [203]
            setups{end+1} = struct('est', 'ekfv3', ...
               'accData', 's', 'oriData', 's', 'accDataNoise', 0, ...
               'initSrc', iI, 'applyMeas', mI, 'applyCstr', cI, ...
               'P', 0.5);
        end
    end
end

for i = 1:length(setups)
    setups{i}.label = getLabel(setups{i});
end
           
dataN = length(dataList);
results = table();

for i = 1:dataN
    n = dataList{i};
    
    name = sprintf('%s-%s-%s', 'neura', n.subj, n.act);
    dataPath = sprintf('%s/mat/%s.mat', dir, name);
    if exist(dataPath, 'file')
        load(dataPath, 'data');
    else
        data = struct('name', name, ...
            'fnameV', sprintf('%s/vicon/%s-%s.mat', dir, n.subj, n.act), ...
            'fnameX', sprintf('%s/xsens/%s-%s.bvh', dir, n.subj, n.act), ...
            'fnameS', sprintf('%s/imu/%s-%s', dir, n.subj, n.act));
        
        data.dataV = mocapdb.ViconBody.loadViconMat(data.fnameV);
        if exist(data.fnameX, 'file')
            data.dataX = mocapdb.BVHBody.loadXsensBVHFile(data.fnameX, "mm");
        else
            data.dataX = mocapdb.BVHBody('nSamples', 0);
        end
%         data.dataS = mocapdb.XsensBody.loadMVNX(data.fnameS, options);
        data.dataS = mocapdb.XsensBody.loadMTExport(data.fnameS, options);
        data.dataS.fs = 100;
        save(dataPath, 'data');
    end
    
    display(sprintf("Data %3d/%3d: %s", i, dataN, data.name));
    r = runNeuRAExperiment(data.dataV, data.dataX, data.dataS, ...
                           data.name, setups, expDir);
    results = [results; struct2table(r)];
end

% Append new results
dataPath = sprintf("%s/results.mat", expDir);
if exist(dataPath, 'file')
    newResults = results;
    load(dataPath);
    [C, ia, ib] = intersect(results(:,{'name', 'label'}), newResults(:,{'name', 'label'}));
    results(ia,:) = [];
    results = [results; newResults];
end
save(sprintf("%s/results.mat", expDir), 'results')

function label = getLabel(setup)
    if setup.accData == 'v'
        if setup.accDataNoise == 0 
            aD = 'v';
        else
            aD = strrep(sprintf('v%.1f', setup.accDataNoise), '.', '');
        end
    else
        aD = setup.accData;
    end
    label = sprintf('N%s%s%s+M%02d+C%03d', aD, setup.oriData, setup.initSrc, ...
        setup.applyMeas, setup.applyCstr);
end